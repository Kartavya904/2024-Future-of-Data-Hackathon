@page
@model FinVest.Pages.FinancesModel

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Finances - @Model.Username</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-3d"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body {
            background-color: #122953;
            font-family: 'Poppins', sans-serif;
            color: #f0f0f0;
        }

        .btn-group .btn-theme {
        background-color: #292959;
        color: #f0f0f0;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 600;
        border: 2px solid #76c7c0;
        transition: background-color 0.2s, transform 0.2s, box-shadow 0.2s;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 0 5px;
        }

        .btn-group .btn-theme:hover {
            background-color: #76c7c0;
            color: #292959;
            transform: scale(1.05);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }

        .content {
            margin-top: 20px;
        }

        .content h2 {
            color: #76c7c0;
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
        }

        .profile-info {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* Always have 3 columns */
            gap: 20px;
            margin-top: 20px;
        }

        .card {
            background-color: #2A2A6A;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
        }

        .card h3 {
            color: #76c7c0;
            font-weight: bold;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .card h3 i {
            margin-right: 10px;
            color: #f0f0f0;
        }

        .card p {
            margin-bottom: 0;
            color: #f0f0f0;
        }

        .grid-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px; /* Adjust the gap between the sections as needed */
            margin-top: 40px;
        }

        .connect-bank-section, .start-trading-section {
            background-color: #1b2b3a;
            padding: 60px 20px; /* Adjust the padding as needed */
            border-radius: 12px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
            color: #f0f0f0;
            text-align: center;
        }

        .connect-bank-section h3, .start-trading-section h3 {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 20px;
            color: #76c7c0;
        }

        .connect-bank-section p, .start-trading-section p {
            font-size: 18px;
            margin-bottom: 30px;
            color: #e0e0e0;
        }

        .btn-theme {
            background-color: #1b2b3a;
            color: #f0f0f0;
            border-radius: 8px;
            border: 2px solid #76c7c0;
            transition: background-color 0.2s, transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            font-size: 18px;
            width: 50%; /* Adjust the width of the button */
        }

        .btn-connect-bank, .btn-start-trading  {
            background-color: #1b2b3a;
            color: #f0f0f0;
            border-radius: 8px;
            padding: 12px 24px;
            font-weight: 600;
            border: 2px solid #76c7c0;
            transition: background-color 0.2s, transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            font-size: 18px;
            width: 50%; /* Adjust the width of the button */
        }

        .btn-connect-bank:hover, .btn-start-trading:hover, .btn-change-table:hover {
            background-color: #76c7c0;
            color: #292959;
            transform: scale(1.05);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }
        
        .transaction-summary {
            margin: 20px 0;
            text-align: center;
            background-color: #1b2b3a;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            color: #f0f0f0;
        }

        .transaction-summary p {
            font-size: 1.2em;
            margin: 10px 0;
        }

        .transaction-summary strong {
            color: #76c7c0;
        }


        .transaction-history {
            margin-top: 20px;
            max-height: 500px;
            overflow-y: scroll;
        }

        .transaction-history table {
            width: 100%;
            color: #f0f0f0;
            background-color: #2A2A6A;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .transaction-history th,
        .transaction-history td {
            padding: 15px;
            text-align: center;
        }

        .transaction-history th {
            background-color: #1B1B50;
            color: #76c7c0;
            cursor: pointer;
        }

        .transaction-history tbody tr:nth-child(odd) {
            background-color: #32327B;
        }

        .transaction-history tbody tr:hover {
            background-color: #1B1B50;
        }

        #loadingScreen {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            font-size: 2em;
            text-align: center;
            padding-top: 20%;
            z-index: 1000;
        }

        /* Hide all tables by default */
        .transaction-table {
            display: none;
        }

        /* Hide all charts by default */
        /* Style the chart rows */
        /* Style the chart rows */
        .chart-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        /* Ensure that each chart container takes up roughly half the width of the row */
        .chart-container {
            width: 48%;
            background-color: #1b2b3a;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
        }


        /* Hide all charts initially */
        .chart-container {
            display: none;
        }

        canvas {
            background-color: #f0f0f0;
            border-radius: 8px;
        }

        #loadingScreen {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            font-size: 2em;
            text-align: center;
            padding-top: 20%;
            z-index: 1000;
        }

        .bank-info {
            display: grid;
            grid-template-columns: repeat(2, 1fr); /* Two items per row */
            gap: 20px; /* Adjust the spacing between the items */
            margin-top: 20px; /* Optional: Add some space above the container */
        }

        .bank-info-custom {
            display: grid;
            grid-template-columns: repeat(2, 1fr); /* Two items per row */
            gap: 20px; /* Space between the items */
            margin-top: 20px;
        }

    .bank-card {
        background-color: #2A2A6A;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .bank-card h3 {
        color: #76c7c0;
        font-weight: bold;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .bank-card h3 i {
        margin-right: 10px;
        color: #f0f0f0;
    }

    .bank-card p {
        margin-bottom: 0;
        color: #f0f0f0;
    }

    .bank-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
    }

    .transaction-container {
        margin: 20px 0;
        color: #f0f0f0;
    }

    .transaction-table {
        width: 100%;
        border-collapse: collapse;
        background: linear-gradient(145deg, #23303d, #1b2b3a);
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        overflow: scroll;
    }

    .transaction-table th, .transaction-table td {
        padding: 12px 15px;
        text-align: left;
        color: #ecf0f1;
        border-bottom: 1px solid #76c7c0;
    }

    .transaction-table th {
        background-color: #1a2c3b;
        font-weight: bold;
        color: #66c2a5;
        text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.5);
    }

    .transaction-table th:hover {
    background-color: #76c7c0;
    color: #1a2c3b;
    }


    .transaction-table tr:hover {
        background-color: #2e4053;
        transition: background-color 0.3s ease;
    }


    .transaction-table td {
        font-size: 14px;
    }

    .transaction-table tbody tr:nth-child(odd) {
        background-color: #23303d;
    }

    .transaction-table tbody tr:nth-child(even) {
        background-color: #1b2b3a;
    }


    </style>
</head>

<body>
    <div id="loadingScreen">Loading, please wait...</div>

    <div class="container content" id="mainContent">
        <h2>Your Profile Information</h2>
        <div class="profile-info">
            <div class="card">
                <h3><i class="bi bi-person"></i>Username:</h3>
                <p>@Model.Username</p>
            </div>

            <div class="card">
                <h3><i class="bi bi-currency-dollar"></i>Preferred Currency:</h3>
                <p>@Model.Currency - @Model.CurrencySymbol</p>
            </div>

            <div class="card">
                <h3><i class="bi bi-cash-stack"></i>Annual Income:</h3>
                <p>@Model.AnnualIncome</p>
            </div>

            <div class="card">
                <h3><i class="bi bi-exclamation-triangle"></i>Risk Tolerance:</h3>
                <p>@Model.RiskTolerance</p>
            </div>

            <div class="card">
                <h3><i class="bi bi-graph-up"></i>Investment Experience:</h3>
                <p>@Model.InvestmentExperience</p>
            </div>

            <div class="card">
                <h3><i class="bi bi-bullseye"></i>Investment Goals:</h3>
                <p>@Model.InvestmentGoals</p>
            </div>
        </div>

        <div class="grid-container">
            <section class="connect-bank-section">
                <div class="container text-center">
                    <h3>Connect Your Bank</h3>
                    <p class="mb-4">Easily link your bank account to FinVest for seamless financial tracking and management.</p>
                    <button id="linkButton" class="btn btn-connect-bank">Connect Your Bank</button>
                </div>
            </section>

            <section class="start-trading-section">
                <div class="container text-center">
                    <h3>Start Your Trading Journey Here</h3>
                    <p class="mb-4">Begin your journey into paper trading and learn the ropes of stock trading without any risk.</p>
                    <button id="startTradingButton" class="btn btn-start-trading" onclick="location.href='/Stocks'">Start Trading</button>
                </div>
            </section>
        </div>

        <!-- Bank Details Section (hidden until successful connection) -->
  <div id="bankDetails" style="display: none;">
    <div class="bank-info-custom">
        <div class="card">
            <h3><i class="bi bi-bank"></i>Bank Name:</h3>
            <p>Chase</p>
        </div>

        <div class="card">
            <h3><i class="bi bi-receipt"></i>Routing Number:</h3>
            <p>4444 4444</p>
        </div>

        <div class="card">
            <h3><i class="bi bi-credit-card"></i>Savings Account:</h3>
            <p>@Model.SavingsAccount</p>
        </div>

        <div class="card">
            <h3><i class="bi bi-credit-card"></i>Checkings Account:</h3>
            <p>@Model.CheckingsAccount</p>
        </div>
    </div>
</div>

<!-- Transaction Summary -->
<div id="transactionSummary" class="transaction-summary" style="display: none;">
    <p>Total Transactions: <strong>@Model.TotalTransactions</strong></p>
    <p>Total Income: <strong>@Model.CurrencySymbol@Model.TotalIncome.ToString("N2")</strong></p>
    <p>Total Expenditure: <strong>@Model.CurrencySymbol@Model.TotalExpenditure.ToString("N2")</strong></p>
</div>

<!-- Filter Options -->
<div id="filterOptions" class="btn-group mb-3" role="group" aria-label="Filter Transactions" style="display: none;">
    <button type="button" class="btn-change-table input-styled" onclick="showTable('daily')">Daily</button>
    <button type="button" class="btn-change-table input-styled" onclick="showTable('monthly')">Monthly</button>
    <button type="button" class="btn-change-table input-styled" onclick="showTable('yearly')">Yearly</button>
</div>

       
<!-- Daily Transactions Table -->
<div id="dailyTable" class="transaction-history transaction-table">
    <h2>Daily Transaction History</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Transaction ID</th>
                <th>Date</th>
                <th>Description</th>
                <th>Category</th>
                <th>Amount</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.TransactionHistory != null)
            {
                @foreach (var transaction in Model.TransactionHistory)
                {
                    <tr>
                        <td>@transaction.TransactionId</td>
                        <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Category</td>
                        <td>@transaction.Amount.ToString("N2")@Model.CurrencySymbol</td>
                        <td>@transaction.RunningBalance.ToString("N2")@Model.CurrencySymbol</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Monthly Transactions Table -->
<div id="monthlyTable" class="transaction-history transaction-table">
    <h2>Monthly Transaction History</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Transaction ID</th>
                <th>Date</th>
                <th>Description</th>
                <th>Category</th>
                <th>Amount</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.TransactionHistoryMonth != null)
            {
                @foreach (var transaction in Model.TransactionHistoryMonth)
                {
                    <tr>
                        <td>@transaction.TransactionId</td>
                        <td>@transaction.TransactionDate.ToString("MM/yyyy")</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Category</td>
                        <td>@transaction.Amount.ToString("N2")@Model.CurrencySymbol</td>
                        <td>@transaction.RunningBalance.ToString("N2")@Model.CurrencySymbol</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Yearly Transactions Table -->
<div id="yearlyTable" class="transaction-history transaction-table">
    <h2>Yearly Transaction History</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Transaction ID</th>
                <th>Date</th>
                <th>Description</th>
                <th>Category</th>
                <th>Amount</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.TransactionHistoryYear != null)
            {
                @foreach (var transaction in Model.TransactionHistoryYear)
                {
                    <tr>
                        <td>@transaction.TransactionId</td>
                        <td>@transaction.TransactionDate.ToString("yyyy")</td>
                        <td>@transaction.Description</td>
                        <td>@transaction.Category</td>
                        <td>@transaction.Amount.ToString("N2")@Model.CurrencySymbol</td>
                        <td>@transaction.RunningBalance.ToString("N2")@Model.CurrencySymbol</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div><br><br>

<!-- First Row -->
<div class="chart-row">
    <div class="chart-container card" id="monthlyIncomeExpenditureChartContainer">
        <h2>Monthly Income vs Expenditure</h2>
        <canvas id="monthlyIncomeExpenditureChart"></canvas>
    </div>

    <div class="chart-container card" id="yearlyIncomeExpenditureChartContainer">
        <h2>Yearly Income vs Expenditure</h2>
        <canvas id="yearlyIncomeExpenditureChart"></canvas>
    </div>
</div>

<!-- Second Row -->
<div class="chart-row">
    <div class="chart-container card" id="runningBalanceChartContainer">
        <h2>Running Balance Over Time</h2>
        <canvas id="runningBalanceChart"></canvas>
    </div>

    <div class="chart-container card" id="monthlyRunningBalanceChartContainer">
        <h2>Monthly Running Balance</h2>
        <canvas id="monthlyRunningBalanceChart"></canvas>
    </div>

</div>

<!-- Third Row -->
<div class="chart-row">
    <div class="chart-container card" id="yearlyRunningBalanceChartContainer">
        <h2>Yearly Running Balance</h2>
        <canvas id="yearlyRunningBalanceChart"></canvas>
    </div>

    <div class="chart-container card" id="3dBarChartContainer">
        <h2>Monthly Savings</h2>
        <canvas id="3dBarChart"></canvas>
    </div>
</div>

<!-- Fourth Row -->
<div class="chart-row">
    <div class="chart-container card" id="3dLineChartContainer">
        <h2>Line Chart of Annual Income vs Expenditure</h2>
        <canvas id="3dLineChart"></canvas>
    </div>
    
    <div class="chart-container card" id="categoryBarChartContainer">
        <h2>Bar Chart of Expenditure by Category</h2>
        <canvas id="categoryBarChart"></canvas>
    </div>
</div>

<!-- Fifth Row -->
<div class="chart-row">
    <div class="chart-container card" id="categoryWiseExpenditureChartContainer">
        <h2>Category-wise Expenditure</h2>
        <canvas id="categoryWiseExpenditureChart"></canvas>
    </div>

    <div id="scatter3dChartContainer" class="chart-container card">
           <h2>Scatter Plot for Transactions</h2>
        <div id="scatter3dChart"></div>
    </div>    
</div>

<!-- Sixth Row -->
<div class="chart-row">
    <div class="chart-container card" id="histogramChartChartContainer">
        <h2>Ribbon Plot: Date vs. Amount vs. Running Balance</h2>
        <div id="ribbon3dChart"></div>
    </div>

    <div class="chart-container card" id="categoryWiseExpenditureChartContainer">
        <h2>Surface Plot: Monthly Income vs. Expenditure</h2>
        <div id="surface3dChart"></div>
    </div>
</div>

<!-- Seventh Row -->
<div class="chart-row">
    <div class="chart-container card" id="histogramChartChartContainer">
        <h2>Heatmap: Date vs. Category vs. Amount</h2>
        <div id="heatmap3dChart"></div>
    </div>

    <div class="chart-container card">
        <h2>Bubble Chart: Expenditure by Category</h2>
        <div id="bubble3dChart"></div>
    </div>
</div>


    <script type="text/javascript">
        var originalTransactions = @Html.Raw(Json.Serialize(Model.TransactionHistory));
        var filteredTransactions = [...originalTransactions];

        var linkToken = "@Model.LinkToken";

        var handler = Plaid.create({
            token: linkToken,
            onSuccess: function (public_token, metadata) {
                console.log("Successfully created transactions!")

                 var bankName = metadata.institution.name;

                // Update the bank name in the DOM
                document.querySelector("#bankDetails .card p").innerHTML = bankName;

                // Show the loading screen
                document.getElementById('loadingScreen').style.display = 'block';

                // Simulate data fetching or processing
                setTimeout(function() {
                    document.getElementById('loadingScreen').style.display = 'none';

                    // Assume fetching transactions and account details is successful
                    document.getElementById('bankDetails').style.display = 'block';
                    document.getElementById('transactionSummary').style.display = 'block';
                    document.getElementById('filterOptions').style.display = 'block';

                    // Initially show the daily table
                    showTable('daily');

                    // Show all charts after connection
                    showAllCharts();
                }, 3000); // 3-second delay
            },
            onExit: function (err, metadata) {
                if (err != null) {
                    console.error("Error Is: " + err);
                }
            },
            onEvent: function (eventName, metadata) {
                console.log(eventName, metadata);
            }
        });

        document.getElementById('linkButton').onclick = function () {
            handler.open();
        };

        function showTable(tableId) {
            // Hide all tables
            document.querySelectorAll('.transaction-table').forEach(table => table.style.display = 'none');

            // Show the selected table
            document.getElementById(tableId + 'Table').style.display = 'block';
        }

        function showAllCharts() {
            document.querySelectorAll('.chart-container').forEach(chart => chart.style.display = 'block');
            renderCharts();
        }


        function renderCharts() {
            var ctxMonthlyIncomeExpenditure = document.getElementById('monthlyIncomeExpenditureChart').getContext('2d');
            var monthlyIncomeExpenditureChart = new Chart(ctxMonthlyIncomeExpenditure, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.Select(t => t.TransactionDate.ToString("MMM yyyy")).Distinct())),
                    datasets: [
                        {
                            label: 'Income',
                            data: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.Where(t => t.Amount > 0).GroupBy(t => new { t.TransactionDate.Year, t.TransactionDate.Month }).Select(g => g.Sum(t => t.Amount)))),
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Expenditure',
                            data: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.Where(t => t.Amount < 0).GroupBy(t => new { t.TransactionDate.Year, t.TransactionDate.Month }).Select(g => g.Sum(t => t.Amount)))),
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            var ctxYearlyIncomeExpenditure = document.getElementById('yearlyIncomeExpenditureChart').getContext('2d');
            var yearlyIncomeExpenditureChart = new Chart(ctxYearlyIncomeExpenditure, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Select(t => t.TransactionDate.Year).Distinct())),
                    datasets: [
                        {
                            label: 'Income',
                            data: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Where(t => t.Amount > 0).GroupBy(t => t.TransactionDate.Year).Select(g => g.Sum(t => t.Amount)))),
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Expenditure',
                            data: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Where(t => t.Amount < 0).GroupBy(t => t.TransactionDate.Year).Select(g => g.Sum(t => t.Amount)))),
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            var ctxCategoryWiseExpenditure = document.getElementById('categoryWiseExpenditureChart').getContext('2d');
            var categoryWiseExpenditureChart = new Chart(ctxCategoryWiseExpenditure, {
                type: 'pie',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Category).Distinct())),
                    datasets: [{
                        label: 'Expenditure by Category',
                        data: @Html.Raw(Json.Serialize(Model.TransactionHistory.Where(t => t.Amount < 0).GroupBy(t => t.Category).Select(g => g.Sum(t => t.Amount)))),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)',
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });

            var ctxRunningBalance = document.getElementById('runningBalanceChart').getContext('2d');
            var runningBalanceChart = new Chart(ctxRunningBalance, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.TransactionDate.ToString("MM/dd/yyyy")))),
                    datasets: [{
                        label: 'Running Balance',
                        data: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.RunningBalance))),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            var ctxMonthlyRunningBalance = document.getElementById('monthlyRunningBalanceChart').getContext('2d');
            var monthlyRunningBalanceChart = new Chart(ctxMonthlyRunningBalance, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.Select(t => t.TransactionDate.ToString("MMM yyyy")).Distinct())),
                    datasets: [{
                        label: 'Monthly Running Balance',
                        data: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.Select(t => t.RunningBalance))),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            var ctxYearlyRunningBalance = document.getElementById('yearlyRunningBalanceChart').getContext('2d');
            var yearlyRunningBalanceChart = new Chart(ctxYearlyRunningBalance, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Select(t => t.TransactionDate.Year).Distinct())),
                    datasets: [{
                        label: 'Yearly Running Balance',
                        data: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Select(t => t.RunningBalance))),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            // 3D Bar Chart of Monthly Savings
            var ctx3dBarChart = document.getElementById('3dBarChart').getContext('2d');
            var barChart = new Chart(ctx3dBarChart, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.Select(t => t.TransactionDate.ToString("MMM yyyy")).Distinct())),
                    datasets: [
                        {
                            label: 'Monthly Savings',
                            data: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.Select(t => t.RunningBalance))),
                            backgroundColor: 'rgba(75, 192, 192, 0.6)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        datalabels: {
                            display: true,
                            color: 'white'
                        },
                        chart3d: {
                            enabled: true,
                            alpha: 45,
                            beta: 45,
                            depth: 100
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // 3D Line Chart of Annual Income vs Expenditure
            var ctx3dLineChart = document.getElementById('3dLineChart').getContext('2d');
            var lineChart = new Chart(ctx3dLineChart, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Select(t => t.TransactionDate.Year).Distinct())),
                    datasets: [
                        {
                            label: 'Annual Income',
                            data: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Where(t => t.Amount > 0).GroupBy(t => t.TransactionDate.Year).Select(g => g.Sum(t => t.Amount)))),
                            backgroundColor: 'rgba(75, 192, 192, 0.6)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Annual Expenditure',
                            data: @Html.Raw(Json.Serialize(Model.TransactionHistoryYear.Where(t => t.Amount < 0).GroupBy(t => t.TransactionDate.Year).Select(g => g.Sum(t => t.Amount)))),
                            backgroundColor: 'rgba(255, 99, 132, 0.6)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        datalabels: {
                            display: true,
                            color: 'white'
                        },
                        chart3d: {
                            enabled: true,
                            alpha: 45,
                            beta: 45,
                            depth: 100
                        }
                    }
                }
            });

            var scatter3dData = [{
                x: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.TransactionDate))),
                y: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Amount))),
                z: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.RunningBalance))),
                mode: 'markers',
                marker: {
                    size: 8,
                    color: 'rgb(255, 0, 0)',
                    opacity: 0.8
                },
                type: 'scatter3d'
            }];
            var scatter3dLayout = {
                title: '3D Scatter Plot: Date vs. Amount vs. Running Balance',
                scene: {
                    xaxis: { title: 'Date (as OA Date)' },
                    yaxis: { title: 'Amount' },
                    zaxis: { title: 'Running Balance' }
                },
                autosize: true,
                margin: {
                    l: 0,
                    r: 0,
                    b: 0,
                    t: 65
                }
            };
            Plotly.newPlot('scatter3dChart', scatter3dData, scatter3dLayout);

            // Bar Chart of Expenditure by Category
            var ctxCategoryBarChart = document.getElementById('categoryBarChart').getContext('2d');
            var categoryBarChart = new Chart(ctxCategoryBarChart, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Category).Distinct())),
                    datasets: [{
                        label: 'Expenditure by Category',
                        data: @Html.Raw(Json.Serialize(Model.TransactionHistory.Where(t => t.Amount < 0).GroupBy(t => t.Category).Select(g => g.Sum(t => t.Amount)))),
                        backgroundColor: 'rgba(255, 99, 132, 0.6)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            var surface3dData = [{
                z: @Html.Raw(Json.Serialize(Model.TransactionHistoryMonth.GroupBy(t => t.TransactionDate.ToString("MMM yyyy"))
                                    .Select(g => new {
                                        Month = g.Key,
                                        Income = g.Where(t => t.Amount > 0).Sum(t => t.Amount),
                                        Expenditure = g.Where(t => t.Amount < 0).Sum(t => -t.Amount)
                                    })
                                    .Select(m => new double[] { m.Income, m.Expenditure }))),
                type: 'surface'
            }];
            var surface3dLayout = {
                title: '3D Surface Plot: Monthly Income vs. Expenditure',
                scene: {
                    xaxis: { title: 'Months' },
                    yaxis: { title: 'Income' },
                    zaxis: { title: 'Expenditure' }
                },
                autosize: true,
                margin: {
                    l: 0,
                    r: 0,
                    b: 0,
                    t: 65
                }
            };
            Plotly.newPlot('surface3dChart', surface3dData, surface3dLayout);

            var ribbon3dData = [{
                x: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.TransactionDate))),
                y: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Amount))),
                z: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.RunningBalance))),
                type: 'scatter3d',
                mode: 'lines',
                line: {
                    width: 10,
                    color: 'rgb(255, 127, 14)'
                }
            }];
            var ribbon3dLayout = {
                title: '3D Ribbon Plot: Date vs. Amount vs. Running Balance',
                scene: {
                    xaxis: { title: 'Date (as OA Date)' },
                    yaxis: { title: 'Amount' },
                    zaxis: { title: 'Running Balance' }
                },
                autosize: true,
                margin: {
                    l: 0,
                    r: 0,
                    b: 0,
                    t: 65
                }
            };
            Plotly.newPlot('ribbon3dChart', ribbon3dData, ribbon3dLayout);

            // var histogram3dData = [{
            //     x: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Amount))),
            //     y: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Category))),
            //     z: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.TransactionDate.ToOADate()))),
            //     type: 'histogram3d',
            //     colorscale: 'Blues',
            //     opacity: 0.6
            // }];
            // var histogram3dLayout = {
            //     title: '3D Histogram: Amount vs. Category vs. Date',
            //     scene: {
            //         xaxis: { title: 'Amount' },
            //         yaxis: { title: 'Category' },
            //         zaxis: { title: 'Date (as OA Date)' }
            //     },
            //     autosize: true,
            //     margin: {
            //         l: 0,
            //         r: 0,
            //         b: 0,
            //         t: 65
            //     }
            // };
            // Plotly.newPlot('histogram3dChart', histogram3dData, histogram3dLayout);
        }

        var heatmap3dData = [{
            x: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.TransactionDate))),
            y: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Category))),
            z: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Amount))),
            type: 'heatmap',
            colorscale: 'YlOrRd'
        }];
        var heatmap3dLayout = {
            title: '3D Heatmap: Date vs. Category vs. Amount',
            scene: {
                xaxis: { title: 'Date (as OA Date)' },
                yaxis: { title: 'Category' },
                zaxis: { title: 'Amount' }
            },
            autosize: true,
            margin: {
                l: 0,
                r: 0,
                b: 0,
                t: 65
            }
        };
        Plotly.newPlot('heatmap3dChart', heatmap3dData, heatmap3dLayout);

        var bubble3dData = [{
            x: @Html.Raw(Json.Serialize(Model.TransactionHistory.Select(t => t.Category).Distinct())),
            y: @Html.Raw(Json.Serialize(Model.TransactionHistory.Where(t => t.Amount < 0).GroupBy(t => t.Category).Select(g => Math.Abs(g.Sum(t => t.Amount))))),
            z: @Html.Raw(Json.Serialize(Model.TransactionHistory.GroupBy(t => t.Category).Select(g => g.Count()))),
            mode: 'markers',
            marker: {
                size: @Html.Raw(Json.Serialize(Model.TransactionHistory.Where(t => t.Amount < 0).GroupBy(t => t.Category).Select(g => Math.Sqrt(Math.Abs(g.Sum(t => t.Amount)))))),
                color: @Html.Raw(Json.Serialize(Model.TransactionHistory.GroupBy(t => t.Category).Select(g => g.Sum(t => t.Amount)))),
                colorscale: 'Viridis',
                opacity: 0.8,
                sizemode: 'area',
                sizeref: 2.0 * Math.max(...@Html.Raw(Json.Serialize(Model.TransactionHistory.Where(t => t.Amount < 0).GroupBy(t => t.Category).Select(g => Math.Sqrt(Math.Abs(g.Sum(t => t.Amount))))))) / (40 ** 2)
            },
            type: 'scatter3d'
        }];
        
        var bubble3dLayout = {
            title: '3D Bubble Chart: Expenditure by Category',
            scene: {
                xaxis: { title: 'Category' },
                yaxis: { title: 'Total Amount Spent', type: 'log' },  // Use logarithmic scale if necessary
                zaxis: { title: 'Number of Transactions' },
                camera: {
                    eye: { x: 1.5, y: 1.5, z: 1.5 }
                }
            },
            margin: {
                l: 0,
                r: 0,
                b: 0,
                t: 65
            },
            autosize: true
        };

        Plotly.newPlot('bubble3dChart', bubble3dData, bubble3dLayout);


    </script>

    <!-- Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>

</html>
